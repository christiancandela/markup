options{  JDK_VERSION = "1.5";  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = false;  MULTI = true;  NODE_PREFIX = "Node";  STATIC = false;  VISITOR = true;  DEBUG_PARSER = false;  DEBUG_TOKEN_MANAGER = false;  NODE_EXTENDS = "SampleDataNode";}PARSER_BEGIN(SampleDataParser)package org.dbdoclet.xsd.sage;import java.io.ByteArrayInputStream;import java.io.UnsupportedEncodingException;public class SampleDataParser{  private static final String ENCODING = "UTF-8";  public static NodeRoot parse(String buffer) throws UnsupportedEncodingException, ParseException  {    if (buffer == null)    {      return null;    }    ByteArrayInputStream instream = new ByteArrayInputStream(buffer.getBytes(ENCODING));    SampleDataParser parser = new SampleDataParser(instream, ENCODING);    NodeRoot root = parser.parse();    return root;  }}PARSER_END(SampleDataParser)SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN :{  < DATA : "DATA" > : VALUES| < OPTIONS : "OPTIONS" >| < UNIQUE : "unique" >| < FOLLOWS : "follows" >| < WORD : ([ "a"-"z", "A"-"Z", "." ])+ >}< VALUES >TOKEN :{  < VALUE :    (      ("\n")+    )?    (~[ "\n" ])+    (      ("\n")+    )? >}NodeRoot parse() #Root :{}{  < OPTIONS >  (    (      optionName() "=" optionValue()    )+  )?  < DATA >  (    value()  )+  < EOF >  {    return jjtThis;  }}void optionName() #OptionName :{  Token t;}{  (    t = < UNIQUE >  | t = < FOLLOWS >  )  {    jjtThis.setToken(t);  }}void optionValue() #OptionValue :{  Token t;}{  t = < WORD >  {    jjtThis.setToken(t);  }}void value() #Value :{  Token t;}{  t = < VALUE >  {    jjtThis.setToken(t);  }}
/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HtmlTokenizer.jj */
/*@egen*/ /**
 * JavaCC file
 */options{  JDK_VERSION = "1.5";  STATIC = false;  DEBUG_TOKEN_MANAGER = false;  DEBUG_PARSER = false;  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = false;}PARSER_BEGIN(HtmlTokenizer)package org.dbdoclet.html.tokenizer.parser;
import java.util.ArrayList;import java.util.HashMap;import java.io.ByteArrayInputStream;import java.io.UnsupportedEncodingException;import org.dbdoclet.progress.ProgressListener;
import org.dbdoclet.progress.ProgressEvent;
import org.dbdoclet.progress.ProgressManager;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class HtmlTokenizer/*@bgen(jjtree)*/implements HtmlTokenizerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTHtmlTokenizerState jjtree = new JJTHtmlTokenizerState();

/*@egen*/
  private static Log logger = LogFactory.getLog(HtmlTokenizer.class);

  private ArrayList<org.dbdoclet.html.tokenizer.Token> tokenList;
  private ArrayList<ProgressListener> listeners;
    public HtmlTokenizer(String buffer, String encoding) throws UnsupportedEncodingException  {    this (new ByteArrayInputStream(buffer.getBytes(encoding)), encoding);  }  public synchronized ArrayList < org.dbdoclet.html.tokenizer.Token > parse() throws ParseException  {    tokenList = new ArrayList < org.dbdoclet.html.tokenizer.Token > ();    start();    return tokenList;  }}PARSER_END(HtmlTokenizer)< DEFAULT >SKIP :{  " "| "\r"| "\t"| "\n"| < "<" (< WHITESPACE >)*    (      "script"    | "style"    ) >  : WithinIgnorable}< WithinIgnorable >SKIP :{  < "</" (< WHITESPACE >)*    (      "script"    | "style"    )    (< WHITESPACE >)* ">" > : DEFAULT}< WithinIgnorable >MORE :{  < ~[ ] >}< DEFAULT >TOKEN : /* DEFAULT */{  < TAG_START : "<" > : TAG_CONTEXT| < QUOTE : [ "\"", "'" ] >| < TEXT :    (      ~[ "<", "\"", "'" ]    | "<"      (        "!" ~[ "-" ] ~[ "-" ]      | < TEXT_AFTER_GT >      )    | "->"    )+ >}< DEFAULT >MORE :{  "<!--" : COMMENT_CONTEXT}< TAG_CONTEXT >SKIP :{  " "| "\r"| "\t"| "\n"}< TAG_CONTEXT >TOKEN :{  < TAG_END : ">" > : DEFAULT| < EQUALS : "=" >| < SLASH : "/" >| < NCNAME : < NAME > >| < VALUE :    (      "\"" (~[ "\"", ">" ])* "\""    | "'" (~[ "'", ">" ])* "'"    | < NAME_CHAR > (< NAME_CHAR > | "?" | "&" )*    ) >}< COMMENT_CONTEXT >
MORE:
{	< ~[] >
}
< COMMENT_CONTEXT >
TOKEN:{  < COMMENT: "-->" > : DEFAULT}TOKEN :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "A"-"Z", "a"-"z" ] >| < #WHITESPACE : [ " ", "\t", "\n", "\r" ] >| < #NAME_START_CHAR : [ ":", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u02ff", "\u0370"-"\u037d", "\u037f"-"\u1fff", "\u200c"-"\u200d", "\u2070"-"\u218f", "\u2c00"-"\u2fef", "\u3001"-"\ud7ff", "\uf900"-"\ufdcf", "\ufdf0"-"\ufffd" ] >| < #TEXT_AFTER_GT : ~[ "/", ":", "!", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u02ff", "\u0370"-"\u037d", "\u037f"-"\u1fff", "\u200c"-"\u200d", "\u2070"-"\u218f", "\u2c00"-"\u2fef", "\u3001"-"\ud7ff", "\uf900"-"\ufdcf", "\ufdf0"-"\ufffd" ] >| < #NAME_CHAR :    (      < NAME_START_CHAR >    | [ "-", ".", "0"-"9", "\u00b7", "\u0300"-"\u036f", "\u203f"-"\u2040" ]    ) >| < #NAME : < NAME_START_CHAR > (< NAME_CHAR >)* >}void start() :{/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) start */
  try {
/*@egen*/  (    tag()  | text()
  | comment()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void tag() :{/*@bgen(jjtree) tag */
  SimpleNode jjtn000 = new SimpleNode(JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token tag = null;  Token name = null;  Token value = null;  Token slash1 = null;  Token slash2 = null;  HashMap < String, String > attributeMap = new HashMap < String, String > ();}{/*@bgen(jjtree) tag */
  try {
/*@egen*/  {    org.dbdoclet.html.tokenizer.Token token = new org.dbdoclet.html.tokenizer.Token();    tokenList.add(token);
    fireProgressEvent(token.toString());
  }  try  {    < TAG_START > (slash1 = < SLASH >) ? tag = ncname()    {      token.setTagName(tag.image);
      token.setLine(tag.beginLine);      token.setColumn(tag.beginColumn);
	  trace("Tag: " + tag.image);
    }    (name = attrName() (equals() value = attrValue())?
    {
      if (value != null)      {              	String buffer = value.image;      	if (buffer != null)      	{        	if (buffer.startsWith("\"") || buffer.startsWith("'"))        	{          		buffer = buffer.substring(1, buffer.length());        	}
        	        	if (buffer.endsWith("\"") || buffer.endsWith("'"))        	{          		buffer = buffer.substring(0, buffer.length() - 1);        	}

        	attributeMap.put(name.image, buffer);      	}
      }    }    ) * (slash2 = < SLASH >) ? < TAG_END >  }  catch (Throwable oops)  {    logger.warn(String.format("Invalid attributes in Element %s line %d column %d",
    			 token.getTagName(), token.getLine(), token.getColumn()));
    logger.warn(oops.getMessage());    Token t = skipTo(DEFAULT, DEFAULT, token.toString(), TAG_END, TAG_START);
    token.setValue("&lt;" + token.getTagName() + toAttributesAsText(attributeMap) + t.image);
    return;  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    StringBuilder buffer = new StringBuilder();    buffer.append('<');    if (slash1 != null)    {      buffer.append('/');    }    if (tag != null)    {      buffer.append(tag.image);    }
    buffer.append(toAttributesAsText(attributeMap));    if (slash2 != null)    {      buffer.append('/');    }    buffer.append('>');    trace(buffer.toString());    token.setValue(buffer.toString());    token.setAttributes(attributeMap);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void comment() :
{/*@bgen(jjtree) comment */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token comment;
}
{/*@bgen(jjtree) comment */
  try {
/*@egen*/
  comment = < COMMENT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    org.dbdoclet.html.tokenizer.Token token = new org.dbdoclet.html.tokenizer.Token(comment.image);
    tokenList.add(token);
    fireProgressEvent(token.toString());
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void text() :{/*@bgen(jjtree) text */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token text;}{/*@bgen(jjtree) text */
  try {
/*@egen*/  ( text = < TEXT > | text = < QUOTE > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/   {    org.dbdoclet.html.tokenizer.Token token = new org.dbdoclet.html.tokenizer.Token(text.image);
	trace("text() " + token);
    tokenList.add(token);
    fireProgressEvent(token.toString());      }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token ncname() :{/*@bgen(jjtree) ncname */
  SimpleNode jjtn000 = new SimpleNode(JJTNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ncname */
  try {
/*@egen*/  t = < NCNAME >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return t;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void equals() :{/*@bgen(jjtree) equals */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) equals */
  try {
/*@egen*/  < EQUALS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token attrName() :{/*@bgen(jjtree) attrName */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token token = null;}{/*@bgen(jjtree) attrName */
  try {
/*@egen*/
  try {  token = < NCNAME >  {    // System.out.println(token.image);    return token;  }
  } catch(Throwable oops) 
  {
    logger.warn(String.format("Invalid attributes in Element %s line %d column %d",
    			 token.image, token.beginLine, token.beginColumn));
	logger.warn(oops.getMessage());

	return skipTo(DEFAULT, TAG_CONTEXT, "", TAG_END, QUOTE);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token attrValue() :{/*@bgen(jjtree) attrValue */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token token = null;}{/*@bgen(jjtree) attrValue */
  try {
/*@egen*/
  try  {  (    token = < VALUE >  | token = < NCNAME >  )  	{    	return token;  	}
  } catch (Throwable oops)  {
    logger.warn(String.format("Invalid attributes in Element %s line %d column %d",
    			 token.image, token.beginLine, token.beginColumn));
    logger.warn(oops.getMessage());
	return skipTo(DEFAULT, TAG_CONTEXT, "", TAG_END, QUOTE);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}JAVACODE private Token skipTo(int preContext, int postContext, String prev, int... kind){/*@bgen(jjtree) skipTo */
SimpleNode jjtn000 = new SimpleNode(JJTSKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  StringBuilder buffer = new StringBuilder();

  boolean skip = true;

  token_source.SwitchTo(preContext);
  
  while (skip) 
  {    Token t = getNextToken();	buffer.append(t.image);
	
	if (t.kind == EOF)	{	  break;
	}

	for (int stop : kind)	{	  if (t.kind == stop)	  {		skip = false;
	  }
	}
  }

  token_source.SwitchTo(postContext);
  return new Token(VALUE, buffer.toString());/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}

JAVACODE private String toAttributesAsText(HashMap<String, String > attributeMap){/*@bgen(jjtree) toAttributesAsText */
     SimpleNode jjtn000 = new SimpleNode(JJTTOATTRIBUTESASTEXT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/	StringBuilder buffer = new StringBuilder();
	  
    for (String attr : attributeMap.keySet())
    {
      buffer.append(' ');
      buffer.append(attr);
      buffer.append("=\"");
      buffer.append(attributeMap.get(attr));
      buffer.append("\"");
    }

    return buffer.toString();/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE public void setProgressListeners(ArrayList<ProgressListener> listeners)
{/*@bgen(jjtree) setProgressListeners */
     SimpleNode jjtn000 = new SimpleNode(JJTSETPROGRESSLISTENERS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
	this.listeners = listeners;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE public void fireProgressEvent(String action)
{/*@bgen(jjtree) fireProgressEvent */
     SimpleNode jjtn000 = new SimpleNode(JJTFIREPROGRESSEVENT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
  	if (listeners != null)  	{
		ProgressEvent event = new ProgressEvent("Tokenizer: " + action);
		event.setStage(ProgressEvent.STAGE_PREPARE);

		ProgressManager pm = new ProgressManager(listeners);
		pm.fireProgressEvent(event);
  	}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

JAVACODE private void trace(String text)
{/*@bgen(jjtree) trace */
SimpleNode jjtn000 = new SimpleNode(JJTTRACE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*//*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
	// System.out.println(String.format("[TRACE] %s",text));
}

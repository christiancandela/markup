/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CssParser.jj */
/*@egen*/ /**
 * JavaCC file
 */options{  JAVA_UNICODE_ESCAPE = true;  JDK_VERSION = "1.5";  DEBUG_TOKEN_MANAGER = false;  DEBUG_PARSER = false;                                                                                              STATIC = false;  UNICODE_INPUT = true;                 }PARSER_BEGIN(CssParser)package org.dbdoclet.css.parser.jjt;import java.util.ArrayList;import java.util.HashMap;import java.io.ByteArrayInputStream;import java.io.UnsupportedEncodingException;public class CssParser/*@bgen(jjtree)*/implements CssParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTCssParserState jjtree = new JJTCssParserState();

/*@egen*/  public CssParser(String buffer, String encoding) throws UnsupportedEncodingException  {    this (new ByteArrayInputStream(buffer.getBytes(encoding)), encoding);  }  public NodeStart parse() throws ParseException  {    return start();  }}PARSER_END(CssParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* DEFAULT */{  < WORD :    (      < LETTER >    | < DIGIT >    )+ >| < UNIVERSAL_RULE : "*" >}TOKEN :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "A"-"Z", "a"-"z", "-" ] >| < #NAME_START_CHAR : [ ":", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u02ff", "\u0370"-"\u037d", "\u037f"-"\u1fff", "\u200c"-"\u200d", "\u2070"-"\u218f", "\u2c00"-"\u2fef", "\u3001"-"\ud7ff", "\uf900"-"\ufdcf", "\ufdf0"-"\ufffd" ] >| < #NOT_NAME_START_CHAR : ~[ "/", ":", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u02ff", "\u0370"-"\u037d", "\u037f"-"\u1fff", "\u200c"-"\u200d", "\u2070"-"\u218f", "\u2c00"-"\u2fef", "\u3001"-"\ud7ff", "\uf900"-"\ufdcf", "\ufdf0"-"\ufffd" ] >| < #NAME_CHAR :    (      < NAME_START_CHAR >    | [ "-", ".", "0"-"9", "\u00b7", "\u0300"-"\u036f", "\u203f"-"\u2040" ]    ) >| < #NAME : < NAME_START_CHAR > (< NAME_CHAR >)* >}NodeStart start()        :{/*@bgen(jjtree) Start */
  NodeStart jjtn000 = new NodeStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  (    selector() "{"    (      rule()    )*    "}"  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void selector()           :{/*@bgen(jjtree) Selector */
  NodeSelector jjtn000 = new NodeSelector(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Selector */
  try {
/*@egen*/  (    t = < WORD >  | t = < UNIVERSAL_RULE >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setToken(t);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void rule() :{}{  ruleName() ":" ruleValue() ";"}void ruleName()           :{/*@bgen(jjtree) RuleName */
  NodeRuleName jjtn000 = new NodeRuleName(JJTRULENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) RuleName */
  try {
/*@egen*/  (t = < WORD >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setToken(t);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ruleValue()            :{/*@bgen(jjtree) RuleValue */
  NodeRuleValue jjtn000 = new NodeRuleValue(JJTRULEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) RuleValue */
  try {
/*@egen*/  (t = < WORD >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setToken(t);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

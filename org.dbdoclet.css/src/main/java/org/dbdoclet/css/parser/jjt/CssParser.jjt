 /**
 * JavaCC file
 */options{  JAVA_UNICODE_ESCAPE = true;  JDK_VERSION = "1.5";  DEBUG_TOKEN_MANAGER = false;  DEBUG_PARSER = false;  MULTI = true;  NODE_DEFAULT_VOID = true;  NODE_EXTENDS = "CssNode";  NODE_PREFIX = "Node";  STATIC = false;  UNICODE_INPUT = true;  VISITOR = true;}PARSER_BEGIN(CssParser)package org.dbdoclet.css.parser.jjt;import java.util.ArrayList;import java.util.HashMap;import java.io.ByteArrayInputStream;import java.io.UnsupportedEncodingException;public class CssParser{  public CssParser(String buffer, String encoding) throws UnsupportedEncodingException  {    this (new ByteArrayInputStream(buffer.getBytes(encoding)), encoding);  }  public NodeStart parse() throws ParseException  {    return start();  }}PARSER_END(CssParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* DEFAULT */{  < WORD :    (      < LETTER >    | < DIGIT >    )+ >| < UNIVERSAL_RULE : "\u002A" >}TOKEN :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "A"-"Z", "a"-"z", "-" ] >| < #NAME_START_CHAR : [ ":", "A"-"Z", "_", "a"-"z", "\u00C0"-"\u00D6", "\u00D8"-"\u00F6", "\u00F8"-"\u02FF", "\u0370"-"\u037D", "\u037F"-"\u1FFF", "\u200C"-"\u200D", "\u2070"-"\u218F", "\u2C00"-"\u2FEF", "\u3001"-"\uD7FF", "\uF900"-"\uFDCF", "\uFDF0"-"\uFFFD" ] >| < #NOT_NAME_START_CHAR : ~[ "/", ":", "A"-"Z", "_", "a"-"z", "\u00C0"-"\u00D6", "\u00D8"-"\u00F6", "\u00F8"-"\u02FF", "\u0370"-"\u037D", "\u037F"-"\u1FFF", "\u200C"-"\u200D", "\u2070"-"\u218F", "\u2C00"-"\u2FEF", "\u3001"-"\uD7FF", "\uF900"-"\uFDCF", "\uFDF0"-"\uFFFD" ] >| < #NAME_CHAR :    (      < NAME_START_CHAR >    | [ "-", ".", "0"-"9", "\u00B7", "\u0300"-"\u036F", "\u203F"-"\u2040" ]    ) >| < #NAME : < NAME_START_CHAR > (< NAME_CHAR >)* >}NodeStart start() #Start :{}{  (    selector() "{"    (      rule()    )*    "}"  )*  {    return jjtThis;  }}void selector() #Selector :{  Token t;}{  (    t = < WORD >  | t = < UNIVERSAL_RULE >  )  {    jjtThis.setToken(t);  }}void rule() :{}{  ruleName() ":" ruleValue() ";"}void ruleName() #RuleName :{  Token t;}{  (t = < WORD >)  {    jjtThis.setToken(t);  }}void ruleValue() #RuleValue :{  Token t;}{  (t = < WORD >)  {    jjtThis.setToken(t);  }}
